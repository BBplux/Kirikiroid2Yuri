plugins {
    id 'com.android.application'
}

android {
    // compileSdkVersion PROP_TARGET_SDK_VERSION
    ndkVersion '25.2.9519653'
    buildToolsVersion '33.0.2'
    compileSdkVersion PROP_TARGET_SDK_VERSION.toInteger()
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    defaultConfig {
        applicationId "com.yuri.kirikiri2"
        targetSdkVersion PROP_TARGET_SDK_VERSION
        minSdkVersion PROP_MIN_SDK_VERSION

        externalNativeBuild {
            if (PROP_BUILD_TYPE == 'ndk-build') {
                ndkBuild {
                    targets 'kirikiri2'
                    arguments 'NDK_TOOLCHAIN_VERSION=clang'
                    arguments '-j' + Runtime.runtime.availableProcessors()

                    def module_paths = [project.file("../../../thirdparty/port/cocos2d-x").absolutePath,
                                        project.file("../../../thirdparty/port/cocos2d-x/cocos").absolutePath,
                                        project.file("../../../thirdparty/port/cocos2d-x/external").absolutePath]
                    if (OperatingSystem.current().isWindows()) {
                        module_paths = module_paths.collect {it.replaceAll('\\\\', '/')}
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }
                }
            }
            else if (PROP_BUILD_TYPE == 'cmake') {
                cmake {
                    version '3.22.1'
                    targets 'kirikiri2'
                    arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE"
                    cppFlags "-frtti -fexceptions -fsigned-char"
                }
            }
        }

        ndk {
            abiFilters = []
            abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
        }
        versionCode 1
        versionName "1.4.0"
    }

    sourceSets.main {
        java.srcDir "java"
        res.srcDir "res"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "../../../asset"
    }

    externalNativeBuild {
        if (PROP_BUILD_TYPE == 'ndk-build') {
            ndkBuild {
                path "cpp/Android.mk"
            }
        }
        else if (PROP_BUILD_TYPE == 'cmake') {
            cmake {
                path "../../../CMakeLists.txt"
            }
        }
    }

    signingConfigs {
       release {
            storeFile file('sign.jks')
            def signPropsFile = file('sign.properties')
            if (signPropsFile.exists()) {
                Properties signProps = new Properties()
                signProps.load(new FileInputStream(signPropsFile))
                keyAlias signProps['SIGN_KEY_ALIAS']
                keyPassword signProps['SIGN_KEY_PASS']
                storePassword signProps['SIGN_STORE_PASS']
            }
            else {
                keyAlias System.getenv("SIGN_KEY_ALIAS")
                keyPassword System.getenv("SIGN_KEY_PASS")
                storePassword System.getenv("SIGN_STORE_PASS")
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/assets/${variant.dirName}"

    variant.mergeAssetsProvider.get().doLast {
        copy {
            from "${buildDir}/../../../Resources"
            into "${buildDir}/intermediates/assets/${variant.dirName}"
            exclude "**/*.gz"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':cocos2dx')

    implementation "androidx.documentfile:documentfile:1.0.1"
    implementation "androidx.activity:activity:1.6.1"
    implementation "androidx.fragment:fragment:1.5.5"
}
